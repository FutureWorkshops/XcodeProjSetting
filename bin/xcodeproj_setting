#!/usr/bin/env ruby

require 'xcodeproj_setting'
require 'optparse'
require 'ostruct'

options = OpenStruct.new
options.skip_plist = false
options.conf = 'Release'
options.print = false
options.print_version = false

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: xcodeproj_setting [options]" 
  opt.on('-p', '--path PATH', "[REQUIRED] Path to the Xcode project (xcproject, not xcworkspace)") { |o| options.path = o }
  opt.on('-t', '--target NAME', "[REQUIRED] Project target") { |o| options.target = o }
  opt.on('-c', '--conf NAME', "Project configuration (default = Release)") { |o| options.conf = o }
  opt.on('-i', '--key NAME', "[REQUIRED] Key to change") { |o| options.key = o }
  opt.on('-p', '--print', "Just print the current key's value and exit") { options.print = true }
  opt.on('-s', '--value VALUE', "[REQUIRED] Value to set for the key") { |o| options.value = o }
  opt.on('-v', '--version', "Print version") { options.print_version = true }
  opt.on_tail("-h", "--help", "Show this message") { puts opt; exit }
end

opt_parser.parse!(ARGV)
mandatory = [:path, :target, :conf, :key]
mandatory << :value unless options.print == true
missing = mandatory.select { |p| options[p].nil? }
unless missing.empty? || options.print_version
  raise OptionParser::MissingArgument.new(missing.join(', '))
end
#puts options

if options.print_version
  puts "Version: " + ChangeBundleid::VERSION
elsif options.print == false
  XcodeProjSetting.change_setting(options.path, options.target, options.conf, options.key, options.value, false)
else
  XcodeProjSetting.print_setting(options.path, options.target, options.conf, options.key)
end

